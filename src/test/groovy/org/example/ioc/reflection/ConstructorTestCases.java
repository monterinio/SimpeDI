package org.example.ioc.reflection;

import org.example.ioc.annotation.Inject;
import org.example.ioc.annotation.PostConstruct;

class ConstructorTestCases {
}

class AutoGeneratedNoArgConstructorTest {

}

class ExplicitlyGeneratedNoArgConstructorTest {

    int x;

    public ExplicitlyGeneratedNoArgConstructorTest(int x) {
        System.out.println("lol");
        this.x = x;
    }
}

class ManyConstructorsWithAnnotationTest {

    int x;
    int y;
    String z;

    public ManyConstructorsWithAnnotationTest() {

    }

    public ManyConstructorsWithAnnotationTest(int x, int y, String z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    @Inject
    public ManyConstructorsWithAnnotationTest(int x, String z) {
        this.x = x;
        this.z = z;
    }
}

class ManyConstructorsWithoutAnnotationTest {

    int x;
    int y;
    String z;

    public ManyConstructorsWithoutAnnotationTest() {

    }

    public ManyConstructorsWithoutAnnotationTest(int x, int y, String z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public ManyConstructorsWithoutAnnotationTest(int x, String z) {
        this.x = x;
        this.z = z;
    }
}

class MultiplyAnnotatedConstructorsTest {

    int x;

    @Inject
    public MultiplyAnnotatedConstructorsTest() {

    }

    @Inject
    public MultiplyAnnotatedConstructorsTest(int x) {
        this.x = x;
    }
}

class ValidPostConstructTest {

    @PostConstruct
    private void init() {
        System.out.println("initiated");
    }
}